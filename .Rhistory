```{r}
boxplot(iris[1:4])
```
```{r}
iris %>%
group_by(Species) %>%
summarise(
sepalLenmean = mean(Sepal.Length),
sepalWidmean = mean(Sepal.Width),
petalLenmean = mean(Petal.Length),
petalWidmean = mean(Petal.Width),
)
```
```{r}
iris %>% summarise_all(mean)
```
```{r}
categorical <-
map(iris[1:4],
~ cut(.,
breaks = c(-Inf, quantile(.)[[2]], quantile(.)[[4]], Inf),
label = c("low", "middle", "high")
)
) %>%
as.data.frame() %>%
mutate(
Species = iris$Species
)
summary(categorical)
```
```{r}
categorical %>%
group_by(Sepal.Length, Sepal.Width, Petal.Length, Petal.Width, Species) %>%
summarise(count = n()) %>%
head(20)
```
```{r fig.height=10}
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar() + facet_wrap(categorical$Species)+ geom_text(stat='count', aes(label=..count..), vjust=-1)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
grid.arrange(bar1, bar2, bar3, bar4, ncol = 1)
```
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width)) +
geom_bar() +
facet_wrap(categorical$Species)+
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
grid.arrange(bar1, bar2, bar3, bar4, ncol = 1) + geom_text(stat='count', aes(label=..count..), vjust=-1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3, bar4, ncol = 1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'red'), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'blue'), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'blue', fontface = 'bold'), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'white', fontface = 'bold'), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'white'))
data_label
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count.., color = 'white'), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar(color=categorical$Species) + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar(aes(color=categorical$Species)) + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width))  + geom_bar(aes(fill=categorical$Species)) + facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) + geom_bar() + facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width))  + geom_bar() + facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) + geom_bar() + facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
bar1 <- categorical %>% ggplot(aes(categorical$Sepal.Width)) +
geom_bar(aes(fill = categorical$Species)) +
facet_wrap(categorical$Species)
bar2 <- categorical %>% ggplot(aes(categorical$Sepal.Length)) +
geom_bar(aes(fill = categorical$Species)) +
facet_wrap(categorical$Species)
bar3 <- categorical %>% ggplot(aes(categorical$Petal.Width)) +
geom_bar(aes(fill = categorical$Species)) +
facet_wrap(categorical$Species)
bar4 <- categorical %>% ggplot(aes(categorical$Petal.Length)) +
geom_bar(aes(fill = categorical$Species)) +
facet_wrap(categorical$Species)
data_label <- geom_text(stat='count', aes(label=..count..), vjust=-1)
grid.arrange(bar1 + data_label, bar2 + data_label, bar3 + data_label, bar4 + data_label, ncol = 1)
summary(iris)
histogram <- function(data, col) {
data %>% ggplot(aes_string(names(data)[col])) +
geom_histogram(fill = "blue", color = "grey") +
facet_wrap(iris$Species)
}
grid.arrange(histogram(iris,1), histogram(iris,2), histogram(iris,3), histogram(iris,4), ncol=2)
histogram <- function(data, col) {
data %>% ggplot(aes_string(names(data)[col])) +
geom_histogram(fill = "blue", color = "grey", bins = 10) +
facet_wrap(iris$Species)
}
grid.arrange(histogram(iris,1), histogram(iris,2), histogram(iris,3), histogram(iris,4), ncol=2)
install.packages("tree")
install.packages("tree")
install.packages("Tree")
install.packages("tree")
install.packages("installr")
:q
library(tidyverse)
library(readr)
library(readxl)
library(tidyverse)
library(tidyverse)
install.packages('tidyverse
')
install.packages('tidyverse')
library(tidyverse)
glimpse(iris)
library(tidyverse)
install.packages('tidyverse')
version
library(tidyverse)
R
version
tinytex::install_tinytex()
head(iris)
apply(iris, 2, range)
apply(iris, 3, range)
apply(iris, 1, range)
apply(iris, 2, mean)
apply(iris, 2, sum)
apply(iris, 2, range)
?apply
apply(iris, 2, sort)
blah <- sapply(iris, is.numeric)
blah
1:12
a+1
"a"+1
paste("x", 1:10)
paste("x", 1:10, collapse = "")
paste("xa", 1:10, collapse = "")
pairs(iris)
pairs(iris, col = iris$Species)
pairs(iris[,1:4], col = iris$Species)
km = kmeans(iris[, 1:4], 3, 100)
km
View(km)
iris$km = km$cluster
iris
head(iris)
table(iris$Species, iris$km)
maximise_diag(table(iris$Species, iris$km))
table(iris$Species, iris$km)
max.col(table(iris$Species, iris$km))
table(iris$Species, max.col(table(iris$Species, iris$km)))
exit
quit()
library(tidyverse)
install.packages('tidyverse')
library(tidyverse)
install.packages("nlme")
library(tidyvser)
library(tidyverse)
library(tidyverse)
library(readxl)
library(lubridate)
library(RSQLite)
iris
ggplot
library(tidyverse)
library(gapminder)
library(purrr)
gapminder <- gapminder %>% mutate(year1950 = year - 1950)
gapminder
by_country <- gapminder %>%
group_by(continent, country) %>%
nest()
by_country
gapminder
# subset nested dataframes
by_country$data[[1]]
# dataset:
mpg
library('tidyverse')
# dataset:
mpg
# aes stands for aesthetic
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class))
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, alpha=class))
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, shape=class))
# class-n utgaar tus burd ni graph baiguulj baina
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class)) + facet_wrap(~ class, nrow=3)
# facet_grid function secondary axis-g zaaj baina drv ~ cyl
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class)) + facet_grid(drv ~ cyl)
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point() + geom_smooth()
ggplot(data=mpg, mapping=aes(x=displ, y=hwy)) + geom_point(mapping=aes(color=class)) + geom_smooth()
# dataset:
mpg
# facet_grid function secondary axis-g zaaj baina drv ~ cyl
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class)) + facet_grid(drv ~ cyl)
# class-n utgaar tus burd ni graph baiguulj baina
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class)) + facet_wrap(~ class, nrow=3)
# facet_grid function secondary axis-g zaaj baina drv ~ cyl
ggplot(data=mpg) + geom_point(mapping=aes(x=displ, y=hwy, color=class)) + facet_grid(drv ~ cyl)
library(readxl)
library(openxlsx)
exit
exit()
library(tidyverse)
install.packages('installr')
library(installr)
exit
exit()
install.packages(c("backports", "broom", "dbplyr", "fs", "glue", "isoband", "lubridate", "pkgbuild", "purrr", "Rcpp", "reshape2", "SnowballC", "stopwords", "tibble", "tidytext", "tinytex", "withr", "xfun", "xml2"))
library(tidyverse)
iris
head(iris)
glimpse(iris)
iris %>%
count(Species, wt = Sepal.Length)
glimpse(iris)
iris %>%
group_by(Species)
iris %>%
group_by(Species) %>%
summarise(n = count(Sepal.Length))
iris %>%
group_by(Species) %>%
summarise(n = sum(Sepal.Length))
iris %>%
count(Species, wt = Sepal.Length)
iris %>%
count(
Species,
wt = Sepal.Length,
name = "BLyat"
)
iris %>%
count(Species, wt = Sepal.Length, name = "Blyat")
iris %>%
count(Species)
iris %>%
filter(Species = 'setosa') %>%
n()
iris %>%
filter(Species == 'setosa') %>%
n()
iris %>%
filter(Species == 'setosa') %>%
n(Sepal.Length)
iris %>%
filter(Species == 'setosa') %>%
n()
iris %>%
count(Species, wt = Sepal.Length, name = "Blyat")
iris %>%
filter(Species == 'setosa') %>%
group_by(Species) %>%
n()
iris %>%
filter(Species == 'setosa') %>%
group_by(Species) %>%
summarise(n = n())
iris %>%
filter(Species == 'setosa') %>%
group_by(Sepal.Length) %>%
summarise(n = n())
iris %>%
count(Species, wt = Sepal.Length, name = "Blyat")
iris %>%
filter(Species == 'setosa') %>%
summarise(n = sum(Sepal.Length))
iris %>%
summarise(n = sum(Sepal.Length))
iris %>%
filter(Species == 'setosa') %>%
summarise(n = sum(Sepal.Length))
iris %>%
count(Species, wt = Sepal.Length, name = "Blyat")
iris %>%
group_by(Species) %>%
mutate(n = n())
iris %>%
group_by(Species) %>%
mutate(n = n()) %>%
ungroup()
iris %>%
group_by(Species) %>%
mutate(n = n())
iris %>%
group_by(Species) %>%
mutate(n = n()) %>%
ungroup()
iris %>%
add_column(Species)
iris %>%
add_column(Species)
iris %>%
add_count(Species)
iris %>%
group_by(Sepal.Length) %>%
mutate(n = n()) %>%
ungroup()
iris %>%
group_by(Sepal.Length) %>%
mutate(n = n())
iris %>%
group_by(Sepal.Length) %>%
mutate(n = n()) %>%
ungroup()
iris %>%
add_count(Species)
library(shiny); runApp('base/r/shiny/emergency.R')
install.packages('neiss')
install.packages("neiss")
df <- tibble::tribble(
~color,     ~a, ~b,
"blue",      1,  2,
"green",     6,  2,
"purple",    3,  3,
"red",       2,  3,
"yellow",    5,  1
)
df
df$color <- factor(df$color)
df
df <- tibble::tribble(
~color,     ~a, ~b,
"blue",      1,  2,
"green",     6,  2,
"purple",    3,  3,
"red",       2,  3,
"yellow",    5,  1
)
df
df$color <- factor(df$color)
df
df %>%
fct_reorder(color, a)
df %>%
fct_reorder(color, a, b)
df %>%
fct_reorder(color, a, b)
df$color <- factor(df$color)
df
df %>%
fct_reorder(color, a, b)
df %>% fct_reorder(color, a, b)
fct_reorder(df$color, df$a, df$b)
fct_reorder(df$color, df$a)
df %>% fct_reorder(color, a)
fct_reorder(df$color, df$a)
a <- fct_reorder(df$color, df$a)
a
a[1]
a[[1]]
a
a <- fct_reorder(df$color, df$a, df$b)
a <- fct_reorder(df$color, df$a, max)
fct_reorder(df$color, df$a, max)
fct_reorder(df$color, df$a, min)
fct_reorder(df$color, df$a, mean)
fct_reorder(df$color, df$a, mean)
crossing(a = 1:10, b = 2:11)
crossing(a = 1:3, b = 2:11)
1e5
1e5 == 100000
library(shiny); runApp('cv.R')
library(gt)
install.packages("gt")
library(gt)
runApp('cv.R')
runApp('cv.R')
runApp('cv.R')
runApp('cv.R')
runApp('cv.R')
runApp('cv.R')
runApp('cv.R')
library(semantic.dashboard)
install.packages("semantic.dashboard")
library(semantic.dashboard)
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
library("shinydashboard")
source('~/.active-rstudio-document', echo=TRUE)
shinyApp(
ui = dashboardPage(
dashboardHeader(),
dashboardSidebar(),
body
),
server = server
)
server <- function(input, output) {
output$Plot1 <- renderPlot({
plot(rnorm(10))
})
output$Plot2 <- renderPlot({
plot(rnorm(20))
})
}
body <- dashboardBody(
box(title = "Box",
width = 12,
status = "warning",
solidHeader = TRUE,
collapsible = TRUE,
column(width = 6, plotOutput(outputId = "Plot1")),
column(width = 6, plotOutput(outputId = "Plot2"))
)
)
source('~/.active-rstudio-document', echo=TRUE)
library("shinydashboard")
library(shiny)
library(semantic.dashboard)
library(shiny.semantic)
source('~/.active-rstudio-document', echo=TRUE)
source('~/.active-rstudio-document', echo=TRUE)
runApp('cv/eee.r')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
exit
library(shiny)
library(semantic.dashboard)
library(shiny.semantic)
runApp('cv/cv.R')
pie(c(3, 4, 4), labels = c("red", "brown", "blue"))
library(shiny); runApp('cv/cv.R')
runApp('cv/cv.R')
library(shiny); runApp('cv/cv.R')
qqq
library(shiny); runApp('cv/cv.R')
library(slickR)
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
data <- as.data.frame(matrix(sample(2:20, 20, replace = T), ncol = 10))
data
matrix(sample(2:20, 20, replace = T), ncol = 10
)
runApp('cv/cv.R')
data <- as.data.frame(matrix(c(1:16), ncol = 8))
data
runApp('cv/cv.R')
library(shiny); runApp('cv/cv.R')
runApp('cv/cv.R')
runApp('cv/cv.R')
library(shiny); runApp('cv/cv.R')
runApp('cv')
runApp('cv')
install.packages("igraph")
install.packages("networkD3")
runApp('cv')
runApp('cv')
install.packages("ggraph")
runApp('cv')
source('~/cv/tab_skill.R', echo=TRUE)
runApp('cv')
install.packages("profvis")
install.packages("profvis")
install.packages("profvis")
setwd("~/base/erdenebayar-cv")
library(shiny)
library(semantic.dashboard)
library(shiny.semantic)
library(tidyverse)
library(plotly)
library(fmsb)
runApp()
runApp()
source('~/base/erdenebayar-cv/tab_work.R', echo=TRUE)
runApp()
runApp()
runApp()
exit
q()
